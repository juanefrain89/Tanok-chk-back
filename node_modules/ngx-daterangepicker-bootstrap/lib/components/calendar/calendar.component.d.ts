import { InputSignal, OutputEmitterRef } from '@angular/core';
import { SideEnum } from "../../model/daterangepicker.model";
import * as i0 from "@angular/core";
export declare class CalendarComponent {
    protected readonly sideEnum: typeof SideEnum;
    readonly showCalInRanges: InputSignal<any>;
    readonly singleDatePicker: InputSignal<any>;
    readonly calendarVariables: InputSignal<any>;
    readonly showWeekNumbers: InputSignal<any>;
    readonly showISOWeekNumbers: InputSignal<any>;
    readonly linkedCalendars: InputSignal<any>;
    readonly showDropdowns: InputSignal<any>;
    readonly locale: InputSignal<any>;
    readonly timePicker: InputSignal<any>;
    readonly startDate: InputSignal<any>;
    readonly timepickerVariables: InputSignal<any>;
    readonly timePickerSeconds: InputSignal<any>;
    readonly timePicker24Hour: InputSignal<any>;
    readonly prevEvent: OutputEmitterRef<{
        $event: MouseEvent;
        side: SideEnum;
    }>;
    readonly nextEvent: OutputEmitterRef<{
        $event: MouseEvent;
        side: SideEnum;
    }>;
    readonly monthChangedEvent: OutputEmitterRef<{
        $event: Event;
        side: SideEnum;
    }>;
    readonly yearChangedEvent: OutputEmitterRef<{
        $event: Event;
        side: SideEnum;
    }>;
    readonly dateEvent: OutputEmitterRef<{
        $event: Event;
        side: SideEnum;
        row: number;
        col: number;
    }>;
    readonly hoverDateEvent: OutputEmitterRef<{
        $event: Event;
        side: SideEnum;
        row: number;
        col: number;
    }>;
    readonly timeChangedEvent: OutputEmitterRef<{
        $event: Event;
        side: SideEnum;
    }>;
    clickPrev($event: MouseEvent, side: SideEnum): void;
    clickNext($event: MouseEvent, side: SideEnum): void;
    monthChanged($event: Event, side: SideEnum): void;
    yearChanged($event: Event, side: SideEnum): void;
    clickDate($event: Event, side: SideEnum, row: number, col: number): void;
    hoverDate($event: Event, side: SideEnum, row: number, col: number): void;
    timeChanged($event: Event, side: SideEnum): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CalendarComponent, "calendar", never, { "showCalInRanges": { "alias": "showCalInRanges"; "required": false; "isSignal": true; }; "singleDatePicker": { "alias": "singleDatePicker"; "required": false; "isSignal": true; }; "calendarVariables": { "alias": "calendarVariables"; "required": false; "isSignal": true; }; "showWeekNumbers": { "alias": "showWeekNumbers"; "required": false; "isSignal": true; }; "showISOWeekNumbers": { "alias": "showISOWeekNumbers"; "required": false; "isSignal": true; }; "linkedCalendars": { "alias": "linkedCalendars"; "required": false; "isSignal": true; }; "showDropdowns": { "alias": "showDropdowns"; "required": false; "isSignal": true; }; "locale": { "alias": "locale"; "required": false; "isSignal": true; }; "timePicker": { "alias": "timePicker"; "required": false; "isSignal": true; }; "startDate": { "alias": "startDate"; "required": false; "isSignal": true; }; "timepickerVariables": { "alias": "timepickerVariables"; "required": false; "isSignal": true; }; "timePickerSeconds": { "alias": "timePickerSeconds"; "required": false; "isSignal": true; }; "timePicker24Hour": { "alias": "timePicker24Hour"; "required": false; "isSignal": true; }; }, { "prevEvent": "prevEvent"; "nextEvent": "nextEvent"; "monthChangedEvent": "monthChangedEvent"; "yearChangedEvent": "yearChangedEvent"; "dateEvent": "dateEvent"; "hoverDateEvent": "hoverDateEvent"; "timeChangedEvent": "timeChangedEvent"; }, never, never, true, never>;
}
