import { InputSignal, OutputEmitterRef } from '@angular/core';
import { Dayjs } from 'dayjs';
import * as i0 from "@angular/core";
export declare class RangesComponent {
    readonly rangesArray: InputSignal<Array<any> | undefined>;
    readonly chosenRange: InputSignal<any>;
    readonly locale: InputSignal<any>;
    readonly ranges: InputSignal<any>;
    readonly minDate: InputSignal<Dayjs | null | undefined>;
    readonly maxDate: InputSignal<Dayjs | null | undefined>;
    readonly rangeEvent: OutputEmitterRef<{
        $event: MouseEvent;
        label: string;
    }>;
    clickRange($event: MouseEvent, label: string): void;
    /**
     * Find out if the selected range should be disabled if it doesn't
     * fit into minDate and maxDate limitations.
     */
    disableRange(range: any): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<RangesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RangesComponent, "ranges", never, { "rangesArray": { "alias": "rangesArray"; "required": false; "isSignal": true; }; "chosenRange": { "alias": "chosenRange"; "required": false; "isSignal": true; }; "locale": { "alias": "locale"; "required": false; "isSignal": true; }; "ranges": { "alias": "ranges"; "required": false; "isSignal": true; }; "minDate": { "alias": "minDate"; "required": false; "isSignal": true; }; "maxDate": { "alias": "maxDate"; "required": false; "isSignal": true; }; }, { "rangeEvent": "rangeEvent"; }, never, never, true, never>;
}
